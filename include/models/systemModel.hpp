#ifndef SYSTEM_MODEL_HPP
#define SYSTEM_MODEL_HPP

#include <string>
#include <vector>
#include <memory>
#include "task.hpp"
#include "job.hpp"
#include "interval.hpp"
#include "time.hpp"
#include "processor.hpp"

// this file is generated by the DSL parser
// the system model
namespace model {
	// 1. define time model
	typedef discreteTime time;

	// 2. define system events
	events<time> systemEvents;
	inline void defineEvents() {
		systemEvents = events<time>(false, true, true, {} );
	}

	// 2. define processor model
	std::vector<processor> processors;
	unsigned int processorCounter = 0;

	inline void defineProcessors() {
		processors.emplace_back("p1", processorCounter++, 4);
	}

	// 3. define task model
	std::vector<task<time>> tasks;
	std::vector<job<time>> segments;
	unsigned int taskCounter = 0;

	inline void defineTasks() {
		tasks.emplace_back("t1", taskCounter++, 10.0, 20.0, Interval<time>(1.0,8.0), 20.0, 0, 5);
		tasks.emplace_back("t2", taskCounter++, 20.0, 30.0, Interval<time>(3.0,5.0), 30.0, 0, 0);
	}

	inline void defineSegments() {
	}

}

#endif